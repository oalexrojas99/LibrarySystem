/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vistas.tema;

import DAOs.TemaDAO;

import entidades.Tema;
import excepcionesPropias.ExcepcionPropia;
import grafoNoDirigido.Vertice;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import listasPropias.ListaTemas;
import relacionTemas.GrafoTemas;
import vistas.principal.GUIPrincipal;

/**
 *
 * @author Alexander
 */
public class GUIConfiguracionBusqueda extends javax.swing.JInternalFrame {

    /**
     * Creates new form GUIEstudiantes
     */
    
    TemaDAO temaDAO = new TemaDAO();
    ListaTemas listaMaterias;
    GrafoTemas miGrafoBusqueda;
    
    public GUIConfiguracionBusqueda() {
        initComponents();
        crearGrafo();
        cargarCboTemas();
    }
    
    public void crearGrafo(){
        
        /*Creamos los vertices*/
        ListaTemas temas = null;
        try {

            temas = temaDAO.obtenerTodosTemas();
            ArrayList<Vertice> vertices = new ArrayList<>();

            for(int i = 0; i < temas.tamanio(); i++)
            {
                vertices.add(new Vertice(temas.obtenerTema(i).getDescripcion()));	
            }

            miGrafoBusqueda = new GrafoTemas(vertices);


        } catch (SQLException ex) {
            Logger.getLogger(GUIConfiguracionBusqueda.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        GrafoTemas grafoDeserializado = miGrafoBusqueda.deserializarGrafo();
        
        if(grafoDeserializado == null){
            miGrafoBusqueda.serializarGrafo(miGrafoBusqueda);
        } else{
            miGrafoBusqueda = grafoDeserializado;
        }
        
    }

    public void cargarCboTemas(){
        try {
            listaMaterias = temaDAO.obtenerTodosTemas();
            
            for (int i = 0; i < listaMaterias.tamanio(); i++) {
                cboTemas.addItem(listaMaterias.obtenerTema(i).getId()+ " - " + listaMaterias.obtenerTema(i).getDescripcion());
                cboTemasInfo.addItem(listaMaterias.obtenerTema(i).getId()+ " - " + listaMaterias.obtenerTema(i).getDescripcion());
                
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
    
    public void cargarCboTemasARelacionar(){
        try {
            cboTemasARelacionar.removeAllItems();
            listaMaterias = temaDAO.obtenerTodosTemas();
            
            for (int i = 0; i < listaMaterias.tamanio(); i++) {
                
                /*Validar campos diferentes*/
                if(!listaMaterias.obtenerTema(i).getDescripcion().equals(cboTemas.getSelectedItem().toString().split(" - ")[1])){
                    cboTemasARelacionar.addItem(listaMaterias.obtenerTema(i).getId()+ " - " + listaMaterias.obtenerTema(i).getDescripcion());
                }
                
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
    
    private void llenarJTableTemasRelacionados(ArrayList<Tema> temas){
        
        DefaultTableModel dtm = new DefaultTableModel();
        
        String[] cabecera = {"Código", "Descripción de tema"}; 
        dtm.setColumnIdentifiers(cabecera);
        dtm.setColumnCount(cabecera.length);
        Object[] dataTema = new Object[dtm.getColumnCount()];
        
        for (int i = 0; i < temas.size(); i++) {
            dataTema[0] = temas.get(i).getId();
            dataTema[1] = temas.get(i).getDescripcion();
            dtm.addRow(dataTema);
        }
        jTableTemasRelacionados.setModel(dtm);
    }
    
    public void irAGUIMateria(){
        GUIPrincipal.vacearDktpPane();
        
        GUITema guiMateria = new GUITema();
        GUIPrincipal.agregarJframe(guiMateria);
        guiMateria.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPaneEstudiante = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnRegresar = new javax.swing.JButton();
        btnRelacionar = new javax.swing.JButton();
        cboTemas = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cboTemasARelacionar = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        cboTemasInfo = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableTemasRelacionados = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };

        setPreferredSize(new java.awt.Dimension(910, 530));

        jPaneEstudiante.setPreferredSize(new java.awt.Dimension(900, 530));
        jPaneEstudiante.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Configuración de búsquedas relacionadas de libros");
        jPaneEstudiante.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 900, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Información de temas relacionados");
        jPaneEstudiante.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 270, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Seleccionar un tema:");
        jPaneEstudiante.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 140, -1));

        btnRegresar.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnRegresar.setText("Regresar");
        btnRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegresarMouseClicked(evt);
            }
        });
        jPaneEstudiante.add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 430, 120, 50));

        btnRelacionar.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnRelacionar.setText("Relacionar temas");
        btnRelacionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRelacionarMouseClicked(evt);
            }
        });
        jPaneEstudiante.add(btnRelacionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 80, 200, 50));

        cboTemas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTemasItemStateChanged(evt);
            }
        });
        jPaneEstudiante.add(cboTemas, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 280, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Seleccionar un tema a relacionar:");
        jPaneEstudiante.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 220, -1));

        jPaneEstudiante.add(cboTemasARelacionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 280, -1));

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOpaque(true);
        jPaneEstudiante.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 880, 6));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Seleccionar un tema:");
        jPaneEstudiante.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 140, -1));

        cboTemasInfo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTemasInfoItemStateChanged(evt);
            }
        });
        jPaneEstudiante.add(cboTemasInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 290, -1));

        jTableTemasRelacionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableTemasRelacionados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTemasRelacionadosMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTableTemasRelacionados);

        jPaneEstudiante.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 880, 170));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPaneEstudiante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPaneEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 398, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegresarMouseClicked
        // TODO add your handling code here:
        irAGUIMateria();
    }//GEN-LAST:event_btnRegresarMouseClicked

    private void jTableTemasRelacionadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTemasRelacionadosMouseClicked
        
    }//GEN-LAST:event_jTableTemasRelacionadosMouseClicked

    private void btnRelacionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRelacionarMouseClicked
        // TODO add your handling code here:
        
        try {
           if(cboTemas.getSelectedIndex() < 0 || cboTemasARelacionar.getSelectedIndex() <0){
               throw new ExcepcionPropia("Debe seleccionar un tema en ambos campos.");
            }
           
            String tema1 = cboTemas.getSelectedItem().toString().split(" - ")[1];
            String tema2 = cboTemasARelacionar.getSelectedItem().toString().split(" - ")[1];
            
            miGrafoBusqueda.relacionarTemas(tema1, tema2);
            miGrafoBusqueda.serializarGrafo(miGrafoBusqueda);
            
            JOptionPane.showMessageDialog(this, String.format("Temas %s y %s relacionados.", tema1, tema2));
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnRelacionarMouseClicked

    private void cboTemasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTemasItemStateChanged
        // TODO add your handling code here:
        if(cboTemas.getSelectedIndex() >= 0){
            cargarCboTemasARelacionar();
        }
    }//GEN-LAST:event_cboTemasItemStateChanged

    private void cboTemasInfoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTemasInfoItemStateChanged
        // TODO add your handling code here:
        
        if(cboTemasInfo.getSelectedIndex() > -1){
            String tema = cboTemasInfo.getSelectedItem().toString().split(" - ")[1];
            ArrayList<String> temas = miGrafoBusqueda.obtenerTemasRelacionados(tema);
            ArrayList<Tema> objTemas = new ArrayList<>();
            try {
                if(temas.size() != 0){
                    objTemas = temaDAO.obtenerTemas(temas);
                    llenarJTableTemasRelacionados(objTemas);
                }
            } catch (SQLException ex) {
                Logger.getLogger(GUIConfiguracionBusqueda.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cboTemasInfoItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnRelacionar;
    private javax.swing.JComboBox<String> cboTemas;
    private javax.swing.JComboBox<String> cboTemasARelacionar;
    private javax.swing.JComboBox<String> cboTemasInfo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPaneEstudiante;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableTemasRelacionados;
    // End of variables declaration//GEN-END:variables
}
